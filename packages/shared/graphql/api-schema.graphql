input CreateInstitutionDataInput {
  area: InstitutionArea!
  level: InstitutionLevel!
  name: String!
}

input CreateInstitutionalPlanDataInput {
  institutionId: String!
  name: String!
  url: String!
  version: Int!
  year: Int!
}

input CreateProgramDataInput {
  description: String!
  endDate: Date
  name: String!
  responsibleId: String!
  startDate: Date
}

input CreateUserDataInput {
  dni: String!
  firstName: String!
  lastName: String!
  name: String!
  password: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTime

"""An arbitrary-precision Decimal type."""
scalar Decimal

type Institution {
  active: Boolean!
  area: InstitutionArea!
  id: ID!
  level: InstitutionLevel!
  name: String!
  objetives: [InstitutionEstraticObjetive!]!
}

enum InstitutionArea {
  educacion
}

type InstitutionEstraticObjetive {
  active: Boolean!
  endDate: Date
  name: String!
  startDate: Date
}

enum InstitutionLevel {
  nacional
}

"""Institution mutations"""
type InstitutionMutations {
  create(data: CreateInstitutionDataInput!): Institution!
  update(data: UpdateInstitutionDataInput!, where: UpdateInstitutionWhereInput!): Institution!
}

type InstitutionPlan {
  active: Boolean!
  id: ID!
  institutionId: String!
  name: String!
  version: Int!
  year: Int!
}

"""Institution queries"""
type InstitutionQueries {
  list(active: Boolean, name: StringFilter): InstitutionsQueryResponse!
  one(id: String!): Institution
}

"""Institution Plan mutations"""
type InstitutionalPlanMutations {
  create(data: CreateInstitutionalPlanDataInput!): InstitutionPlan!
  update(data: UpdateInstitutionalPlanDataInput!, where: UpdateInstitutionalPlanWhereInput!): InstitutionPlan!
}

"""Institutional Plan queries"""
type InstitutionalPlanQueries {
  list(active: Boolean, name: StringFilter): InstitutionalPlansQueryResponse!
  one(id: String!): InstitutionPlan
}

type InstitutionalPlansQueryResponse {
  records: [InstitutionPlan!]!
}

type InstitutionsQueryResponse {
  records: [Institution!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  institution: InstitutionMutations!
  institutionalPlan: InstitutionalPlanMutations!
  program: ProgramMutations!
  user: UserMutations!
}

type Program {
  active: Boolean!
  description: String
  endDate: Date
  id: ID!
  name: String!
  projects: [Project!]!
  responsible: User!
  responsibleId: String!
  startDate: Date
}

"""Program mutations"""
type ProgramMutations {
  create(data: CreateProgramDataInput!): Program!
  update(data: UpdateProgramDataInput!, where: UpdateProgramWhereInput!): Program!
}

"""Program queries"""
type ProgramQueries {
  list(active: Boolean, name: StringFilter): ProgramsQueryResponse!
  one(id: String!): Program
}

type ProgramsQueryResponse {
  records: [Program!]!
}

type Project {
  active: Boolean!
  description: String
  endDate: Date
  goals: [ProjectGoal!]!
  id: ID!
  name: String!
  startDate: Date
}

type ProjectGoal {
  active: Boolean!
  endDate: Date
  id: ID!
  name: String!
  startDate: Date
}

"""Project queries"""
type ProjectQueries {
  list(active: Boolean, name: StringFilter): ProjectsQueryResponse!
  one(id: String!): Project
}

type ProjectsQueryResponse {
  records: [Program!]!
}

type Query {
  institution: InstitutionQueries!
  institutionalPlan: InstitutionalPlanQueries!
  program: ProgramQueries!
  project: ProjectQueries!
  user: UserQueries!
}

input StringFilter {
  contains: String!
  endsWith: String!
  equals: String!
  startsWith: String!
}

input UpdateInstitutionDataInput {
  active: Boolean
  area: InstitutionArea
  level: InstitutionLevel
  name: String
}

input UpdateInstitutionWhereInput {
  id: String!
}

input UpdateInstitutionalPlanDataInput {
  active: Boolean!
  name: String!
  year: Int!
}

input UpdateInstitutionalPlanWhereInput {
  id: String!
}

input UpdateProgramDataInput {
  active: Boolean
  description: String
  endDate: Date
  name: String
  responsibleId: String
  startDate: Date
}

input UpdateProgramWhereInput {
  id: String!
}

input UpdateUserDataInput {
  active: Boolean
  dni: String
  firstName: String
  lastName: String
  name: String
  password: String
}

input UpdateUserWhereInput {
  id: String!
}

type User {
  active: Boolean!
  dni: String!
  firstName: String!
  id: ID!
  lastName: String!
  name: String!
}

"""User mutations"""
type UserMutations {
  create(data: CreateUserDataInput!): User!
  update(data: UpdateUserDataInput!, where: UpdateUserWhereInput!): User!
}

"""User queries"""
type UserQueries {
  list(active: Boolean, name: StringFilter): UsersQueryResponse!
  one(id: String!): User
}

type UsersQueryResponse {
  records: [User!]!
}